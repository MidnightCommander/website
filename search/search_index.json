{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Midnight Commander","text":"<p>GNU Midnight Commander (or <code>mc</code>) is a visual, dual-pane file manager. It is released under the GNU General Public License and therefore qualifies as Free Software.</p> <p>Midnight Commander is a feature-rich, full-screen, text-mode application that allows you to copy, move, and delete files and entire directory trees, search for files, and execute commands in the subshell. Internal viewer, editor and diff viewer are included.</p> <p><code>mc</code> uses versatile text interface libraries such as ncurses or S-Lang, which allows it to work on a regular console, inside an X Window terminal, over <code>ssh</code> connections, and in all kinds of remote shells.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>The easiest way to install <code>mc</code> is to use your system package manager:</p> Debian / UbuntuFedora / Red HatFreeBSDOpenBSDmacOS <pre><code># apt-get install mc\n</code></pre> <pre><code># dnf install mc\n</code></pre> <pre><code># pkg install mc\n</code></pre> <pre><code># pkg_add mc\n</code></pre> <pre><code>% brew install midnight-commander\n</code></pre> <p>Our source releases are kindly mirrored by OSU OSL. Our canonical repository is hosted on GitHub. See the Source code page for details.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The primary way to learn about <code>mc</code> is to use the context-sensitive online help available via F1.</p> <p>We also have extensive manual pages, which are the primary source of official documentation:</p> mcmceditmcviewmcdiff <pre><code>$ man mc\n</code></pre> <p>... or read the latest development version online.</p> <pre><code>$ man mcedit\n</code></pre> <p>... or read the latest development version online.</p> <pre><code>$ man mcview\n</code></pre> <p>... or read the latest development version online.</p> <pre><code>$ man mcdiff\n</code></pre> <p>... or read the latest development version online.</p>"},{"location":"#color-schemes","title":"Color schemes","text":"<p>Midnight Commander supports theming! Check out the skins that come with the distribution or develop your own:</p> <ul> <li>https://skins.midnight-commander.org</li> </ul>"},{"location":"#contributing-support","title":"Contributing &amp; support","text":"<ul> <li>For support, see the Communication page.</li> <li>To contribute to <code>mc</code>, proceed to the \"Development\" section.</li> <li>Release notes for the development version are collected on the wiki.</li> </ul>"},{"location":"coding-style/","title":"Coding style","text":"<p>We loosely follow the GNU Coding Standards with some local deviations. Whether you agree with them or not, do check it out\u2014it is an educational read. In a nutshell:</p> <ul> <li>Use templates for new files (see maint/templates in the source tree)</li> <li>Maximum line width is 100 characters<sup>1</sup></li> <li>No tabs, indent with 4 spaces</li> <li>No trailing whitespace</li> </ul> <p>Use the <code>clang-format</code> to format the code:</p> <pre><code>$ make indent\n</code></pre> <p>To avoid formatting differences between <code>clang-format</code> versions, we currently use <code>clang-format-20.1.3</code>. The clang-format Python distribution provides precompiled binaries for all major platforms:</p> <pre><code>$ uv tool install 'clang-format==20.1.3'\n$ alias clang-format='uvx clang-format'\n</code></pre>"},{"location":"coding-style/#readable-code","title":"Readable code","text":"<p>Use your best judgment and choose the more readable option. Remember that many other people will be reading it:</p> Right<pre><code>bytes = read (fd, &amp;routine.pointer, sizeof (routine));\nif (bytes == -1 || (size_t) bytes &lt; sizeof (routine))\n    ...\n</code></pre> Wrong<pre><code>if ((bytes = read (fd, &amp;routine.pointer, sizeof (routine))) == -1 || (size_t) bytes &lt; sizeof (routine))\n    ...\n</code></pre> <p>Do not put more than one statement on a line:</p> Right<pre><code>a = 0;\nb = 2;\n\na = f ();\nif (a == 2)\n    b = 5;\n</code></pre> Wrong<pre><code>a = 0; b = 2;\n\nif ((a = f()) == 2)\n    b = 5;\n\nif (a == 2) b = 5;\n</code></pre>"},{"location":"coding-style/#comments","title":"Comments","text":"<p>Precede comments with a blank line. If the comment belongs directly to the following code, there should not be a blank line after the comment, unless the comment contains a summary of several blocks of following code.</p> Right<pre><code>/*\n * This is a multiline comment\n *\n * Note that edit_delete() will not corrupt anything if it is called \n * while the cursor position is EOF.\n */\n(void) edit_delete (edit);\n\n// This is a one-line comment. Allocate additional memory.\nmem = (char *) malloc (memneed);\n\n/**\n * @brief This is a Doxygen comment\n *\n * This is a more detailed explanation of\n * this simple function.\n *\n * @param[in]   param1     The parameter value of the function\n * @param[out]  result1    The result value of the function\n * @return                 0 on success and -1 on error\n */\nint example (int param1, int *result1);\n</code></pre> Wrong<pre><code>//This is a one-line comment.\nmem = (char *) malloc (memneed);// No space before comment\n\n/* This is a multiline comment,\n   with some more words...*/\n</code></pre>"},{"location":"coding-style/#conditionals","title":"Conditionals","text":"<p>Always follow an <code>if</code> keyword with a space, but do not include additional spaces before or after the parentheses in the conditional:</p> Right<pre><code>if (i == 0)\n\u2800\n</code></pre> Wrong<pre><code>if ( i == 0 )\nif (0 == i)\n</code></pre> <p>Use explicit comparison in equality operators:</p> <pre><code>void *p1, *p2;\nint i1, i2;\nchar c1, c2;\n</code></pre> Right<pre><code>if (p1 != NULL)\nif (p2 == NULL)\n\nif (i1 != 0)\nif (i2 == 0)\n\nif (c1 != '\\0')\nif (c2 == '\\0')\n</code></pre> Wrong<pre><code>if (p1)\nif (!p2)\n\nif (i1)\nif (!i2)\n\nif (c1)\nif (!c2)\n</code></pre> <p>Do not check boolean values for equality:</p> <pre><code>gboolean b1, b2;\n</code></pre> Right<pre><code>if (b1)\nif (!b2)\n</code></pre> Wrong<pre><code>if (b1 == TRUE)\nif (b2 == FALSE)\n</code></pre>"},{"location":"coding-style/#function-calls","title":"Function calls","text":"<p>Always include a space between the name and the left parentheses when calling functions:</p> Right<pre><code>do_example (int param1, int *result1);\n</code></pre> Wrong<pre><code>do_example(int param1, int *result1);\n</code></pre>"},{"location":"coding-style/#braces","title":"Braces","text":"<p>Braces for blocks of code associated with <code>for</code>, <code>if</code>, <code>switch</code>, <code>while</code>, <code>do .. while</code>, etc. should start on the next line after the statement keyword and end on a separate line.</p> <p>If the length of the opening statement requires it to span multiple lines, the opening brace should be on a separate line.</p> <p>Do not use braces unnecessarily when a single statement will do.</p> Right<pre><code>if (xterm_flag &amp;&amp; xterm_title)\n{\n    path = strip_home_and_password (current_panel-&gt;cwd);\n    ...\n}\n\nfor (k = 0; k &lt; 10; k++)\n     for (j = 0; j &lt; 10; j++)\n        for (i = 0; str_options[i].opt_name != NULL; i++)\n            g_free (*str_options[i].opt_addr);\n</code></pre> Wrong<pre><code>if (xterm_flag &amp;&amp; xterm_title) {\n    path = strip_home_and_password (current_panel-&gt;cwd);\n    ...\n}\n\nif (xterm_flag &amp;&amp; xterm_title)\n{\n    path = strip_home_and_password (current_panel-&gt;cwd); }\n</code></pre>"},{"location":"coding-style/#goto","title":"Goto","text":"<p>Use <code>goto</code> only when necessary; it is evil, but can greatly improve readability and reduce memory leaks when used as the only exit point from a function.</p> Right<pre><code>{\n    if (link_type == LINK_HARDLINK)\n    {\n        src = g_strdup_printf (_ (\"Link %s to:\"), str_trunc (fname, 46));\n        dest = input_expand_dialog (_ (\"Link\"), src, MC_HISTORY_FM_LINK, \"\");\n\n        if (dest == NULL || *dest == '\\0')\n            goto cleanup;\n        ...\n        ...\n    }\n    ...\n    ...\n\ncleanup:\n    g_free (src);\n    g_free (dest);\n\n}\n</code></pre>"},{"location":"coding-style/#variables","title":"Variables","text":"<p>Do not mix variable declarations and code; declare variables only at the beginning of the appropriate block.</p> <p>Reduce variable scope as much as possible: declare local variables in the block where they are used.</p> <p>Separate variable declaration and code with an empty line.</p> Right<pre><code>{\n    while (TRUE) {\n        int foo = 0;\n\n        do_bar (foo);\n    }\n}\n</code></pre> Wrong<pre><code>{\n    int foo = 0;\n    while (TRUE) {\n        do_bar (foo);\n    }\n}\n\u2800\n</code></pre> <p>If a variable is introduced only to store an intermediate value, declare it at the place of use, join declaration and initialization, and mark it as a constant:</p> Right<pre><code>const ssize_t len = mc_readlink ( ... );\n\u2800\n\u2800\n</code></pre> Wrong<pre><code>ssize_t len;\n\nlen = mc_readlink ( ... );\n</code></pre> <p>Avoid having initialized and uninitialized variables in the same declaration:</p> Right<pre><code>int a;\nint b = 0;\n</code></pre> Wrong<pre><code>int a, b = 0;\n\u2800\n</code></pre> <p>Avoid multiple non-trivial variable initializations in a declaration:</p> Right<pre><code>int a = 2 + 5;\nint b = 4 * 3 - 1;\n</code></pre> Wrong<pre><code>int a = 2 + 5, b = 4 * 3 - 1;\n\u2800\n</code></pre> <p>Mark unused variables with the <code>MC_UNUSED</code> macro:</p> Right<pre><code>int\nprogress_button_callback (MC_UNUSED WButton *button, MC_UNUSED int action)\n{\n    return 0;\n}\n</code></pre> Wrong<pre><code>int\nprogress_button_callback (WButton *button, int action)\n{\n    (void) button;\n    (void) action;\n\n    return 0;\n}\n</code></pre> <p>Try to avoid passing function calls as function parameters in new code. Not doing so makes the code much easier to read, and it is also easier to use the <code>step</code> command in <code>gdb</code>.</p> Right<pre><code>void\ndirsizes_cmd (void)\n{\n    const ComputeDirSizeUI *ui = compute_dir_size_create_ui ();\n    compute_dir_size_destroy_ui (ui);\n}\n</code></pre> Wrong<pre><code>void\ndirsizes_cmd (void)\n{\n    compute_dir_size_destroy_ui (compute_dir_size_create_ui ());\n}\n</code></pre> <p>Avoid abusing non-<code>const</code> function parameters as local variables:</p> Right<pre><code>void\nfoo (const int iterations)\n{\n    int result;\n\n    result = do_one_thing (iterations);\n    do_something (&amp;result);\n    ...\n}\n</code></pre> Wrong<pre><code>void\nfoo (int iterations)\n{\n    iterations = do_one_thing (iterations);\n    do_something (&amp;iterations);\n    ...\n}\n</code></pre>"},{"location":"coding-style/#loops","title":"Loops","text":"<p>Declare loop variables within the loop to limit its scope and avoid unwanted reuse of the last value set.</p> Right<pre><code>\u2800\nfor (int i = 0; i &lt; 5; i++)\n{\n    do_something (i);\n}\n\u2800\n</code></pre> Wrong<pre><code>int i;\n\nfor (i = 0; i &lt; 5; i++)\n{\n    do_something (i);\n}\n</code></pre>"},{"location":"coding-style/#headers","title":"Headers","text":"<p>Do not mix headers:</p> Right<pre><code>#include &lt;errno.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n\n#include \"lib/global.h\"\n#include \"lib/tty/tty.h\"  // LINES, tty_touch_screen()\n#include \"lib/tty/win.h\"  // do_enter_ca_mode()\n\n#include \"src/subshell.h\"  // use_subshell\n#include \"src/help.h\"      // interactive_display()\n#include \"src/setup.h\"\n</code></pre> Wrong<pre><code>#include &lt;errno.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n#include &lt;sys/stat.h&gt;\n\n#include \"src/subshell.h\"  // use_subshell\n#include \"src/help.h\"      // interactive_display()\n\n#include \"lib/tty/tty.h\"  // LINES, tty_touch_screen()\n#include \"lib/tty/win.h\"  // do_enter_ca_mode()\n\n#include \"src/setup.h\"\n#include \"lib/global.h\"\n</code></pre> <p>Use short comment for header file:</p> Right<pre><code>#include \"lib/tty/tty.h\"   // LINES, tty_touch_screen()\n#include \"lib/tty/win.h\"   // do_enter_ca_mode()\n#include \"src/subshell.h\"  // use_subshell\n#include \"src/help.h\"      // interactive_display()\n</code></pre> <ol> <li> <p>This is not to please folks with low-resolution screens, but rather because sticking to 100 columns prevents you from easily nesting more than one level of if statements or other code blocks.\u00a0\u21a9</p> </li> </ol>"},{"location":"communication/","title":"Communication","text":"<p>Communication, discussion, and decision-making within the Midnight Commander project is primarily done through mailing list conversations.</p> <p>Alternatively, we have opened up GitHub Discussions for those who prefer a more forum-like experience.</p> <p>To report an issue or file a feature request please use our issue tracker on GitHub.</p> <p>Warning</p> <p>Please keep in mind that the project is maintained by volunteers who code and communicate in their spare time for the fun of it. There is no entitlement to commercial-grade support, service level agreements, or any kind of warranties.</p> <p>For best results, follow \"The Core Rules of Netiquette\" by Virginia Shea, which has not lost its relevance since 1994. In short, be pleasant and polite... and have fun!</p>"},{"location":"communication/#mailing-lists","title":"Mailing lists","text":""},{"location":"communication/#users","title":"Users","text":"<ul> <li>Subscribe to post</li> <li>Read the archives:<ul> <li>Current archives at OSU OSL</li> <li>Old archives at discontinued GNOME mail services</li> </ul> </li> </ul>"},{"location":"communication/#developers","title":"Developers","text":"<ul> <li>Subscribe to post</li> <li>Read the archives:<ul> <li>Current archives at OSU OSL</li> <li>Old archives at discontinued GNOME mail services</li> </ul> </li> </ul>"},{"location":"maintainers/","title":"Maintainers","text":"<p>The Midnight Commander project was founded around 1994 by Miguel de Icaza and is currently maintained as a team effort. We would like to thank all our contributors, past and present, including translators.</p>"},{"location":"maintainers/#current-team","title":"Current team","text":"<ul> <li> <p>Andrew Borodin \u00b7  aborodin / mc-worker</p> </li> <li> <p>Yury V. Zaytsev \u00b7  zyv \u00b7 </p> </li> </ul>"},{"location":"maintainers/#former-team-members","title":"Former team members","text":"<p>Listed alphabetically by last name:</p> <ul> <li>Egmont Koblinger \u00b7  egmontkob</li> <li>Stan. S. Krupoderov \u00b7  iNode</li> <li>Ilia Maslakov \u00b7  ilia-maslakov</li> <li>mooffie \u00b7  mooffie</li> <li>Mikhail S. Pabalavets \u00b7  styx</li> <li>Sergei Trofimovich \u00b7  trofi</li> <li>Enrico Weigelt \u00b7  metux</li> <li>Patrick Winnertz \u00b7  winnieXY</li> <li>Slava Zanko<sup>1</sup> \u00b7  slavaz</li> </ul>"},{"location":"maintainers/#former-maintainers","title":"Former maintainers","text":"<p>Listed in reverse chronological order:</p> <ul> <li>Pavel Tsekov \u00b7  ptsekov</li> <li>Pavel Roskin \u00b7  proski</li> <li>Miguel de Icaza \u00b7  migueldeicaza</li> </ul> <ol> <li> <p>Slava relaunched Midnight Commander as a collaborative project in 2009 and became the release manager until he stepped down for personal reasons in 2015.\u00a0\u21a9</p> </li> </ol>"},{"location":"other/","title":"Other resources","text":"<p>This website is the new home of Midnight Commander.</p> <p>The main project forge has been moved from Savannah and later Trac to a new forge hosted by GitHub.</p> <p>We used to run a self-hosted Trac instance for over a decade to serve as our home page, wiki, source browser, and issue tracker. With the retirement of Trac, most of these items have been moved to GitHub.</p> <p> Our thanks go to JetBrains for providing us with licenses for CLion and PyCharm to use in developing Midnight Commander!</p>"},{"location":"other/#trac-archives","title":"Trac archives","text":"<p>The old server is still available at https://old.midnight-commander.org until it is decommissioned. Please let us know if there is any content you would like to secure!</p> <ul> <li>Files</li> <li>Wiki</li> </ul>"},{"location":"other/#obsolete-mailing-lists","title":"Obsolete mailing lists","text":""},{"location":"other/#commit-notifications","title":"Commit notifications","text":"<ul> <li>Read the archives at Google Groups</li> </ul>"},{"location":"other/#ticket-updates","title":"Ticket updates","text":"<ul> <li>Read the archives at Google Groups</li> </ul>"},{"location":"other/#forks","title":"Forks","text":"<p>Warning</p> <p>The projects below may be of interest to you. Please note that we are not associated with these projects and cannot offer any support!</p>"},{"location":"other/#microsoft-windows","title":"Microsoft Windows","text":"<p>This fork appears to be actively developed. Please contact the author for status and support.</p> <ul> <li>Source code:<ul> <li>https://github.com/adamyg/mcwin32</li> </ul> </li> </ul>"},{"location":"other/#lua-scripting-mc2","title":"Lua scripting (mc^2)","text":"<p>This fork is based on <code>mc-4.8.17</code> (released in 2016) and unfortunately has not been updated since.</p> <ul> <li>Source code:<ul> <li>https://github.com/mooffie/mc</li> </ul> </li> <li>Documentation:<ul> <li>https://www.geek.co.il/~mooffie/mc-lua/docs/html/</li> </ul> </li> </ul>"},{"location":"release-process/","title":"Release process","text":"<ul> <li>We usually make two releases per year (spring and fall)</li> <li>We currently use a semantic versioning scheme (<code>4.8.XX</code>)</li> </ul>"},{"location":"release-process/#pre-requisites","title":"Pre-requisites","text":""},{"location":"release-process/#release-vm","title":"Release VM","text":"<ul> <li>Install a fresh Fedora VM to cut a release: <pre><code>yum build-dep mc\nyum install git-core fakeroot check-devel po4a libX11-devel\n</code></pre></li> <li>Configure <code>git</code>: <pre><code>git config --global user.name \"Yury V. Zaytsev\"\ngit config --global user.email \"yury@shurup.com\"\n</code></pre></li> <li>Port over the GPG keyring to make it possible to sign the tags.</li> </ul>"},{"location":"release-process/#transifex","title":"Transifex","text":"<p>Set up Transifex to be able to work with translations.</p>"},{"location":"release-process/#release-process_1","title":"Release process","text":"<p>Copy and paste the following list into the <code>Prepare for release mc-4.8.XX</code> issue on GitHub:</p>"},{"location":"release-process/#pre-release-tasks","title":"Pre-release tasks","text":"<ul> <li> Prepare the repository for release: <pre><code>git clone git@github.com:MidnightCommander/mc.git\ngit fetch\ngit checkout master\ngit reset --hard origin/master\ngit clean -dfx\n./autogen.sh\nmkdir dist; cd dist; ../configure; cd ..\n</code></pre></li> <li> Download PO translations from Transifex: <pre><code>./maint/sync-transifex/po-from-transifex.py\n</code></pre></li> <li> Commit PO translations to <code>git</code>: <pre><code>make -C dist/po update-po\ngit add po/*.po\ngit commit -s -m 'maint: update PO translations from Transifex'\ngit push origin master\n</code></pre></li> <li> Download hints translations from Transifex: <pre><code>./maint/sync-transifex/hints-from-transifex.py\n</code></pre></li> <li> Commit hints translations to <code>git</code>: <pre><code>git add doc/hints/l10n/mc.hint.*\ngit commit -s -m 'maint: update hints translations from Transifex'\ngit push origin master\n</code></pre></li> <li> Create a new <code>NEWS-4.8.YY</code> wiki page for the next version with an empty template. The template can be copied from the current <code>NEWS</code> wiki page (without the list of tasks and bug reports).</li> <li> Add the content of the current <code>NEWS</code> wiki page to the <code>doc/NEWS</code> file in the <code>git</code> repo: <pre><code>git add doc/NEWS\ngit commit -s -m 'maint: update doc/NEWS file'\ngit push origin master\n</code></pre></li> <li> Create a new version label<sup>1</sup> on GitHub (<code>ver: 4.8.XX</code>)</li> <li> Create a new milestone<sup>1</sup> on GitHub (<code>4.8.YY</code>)</li> </ul>"},{"location":"release-process/#cutting-release-tarballs","title":"Cutting release tarballs","text":"<ul> <li> Create a new <code>git</code> tag: <pre><code>git tag -s 4.8.XX  # \"Release\" or \"RCn\"\n</code></pre></li> <li> Create <code>*.tar.(bz2|xz)</code> distribution archives: <pre><code>cd dist; fakeroot make dist-bzip2 &amp;&amp; fakeroot make dist-xz\n\n# https://bugzilla.redhat.com/show_bug.cgi?id=2338285\ncat mc-4.8.33.tar | XZ_OPT=${XZ_OPT--e} xz -c &gt;mc-4.8.33.tar.xz\n</code></pre></li> <li> Compute checksums for distribution archives: <pre><code>sha256sum mc-*tar.* &gt; mc-4.8.XX.sha256\n</code></pre></li> <li> Upload source packages and checksums to the issue</li> <li> Developers should download tarballs, verify checksums, compile and install locally; if everything is OK, developers should vote for the release. <pre><code>./configure --prefix=$(pwd)/install\nmake install\nmake check\n</code></pre></li> <li> Push out the release (or release candidate) tag: <pre><code>git push origin 4.8.XX\n</code></pre></li> <li> Upload source packages and checksums to the mirror master (maintainers should have access via public keys): <pre><code>scp mc-4.8.XX.* midnightcommander@ftp-osl.osuosl.org:/home/midnightcommander/data\nssh midnightcommander@ftp-osl.osuosl.org 'ls -als /home/midnightcommander/data/' | grep 4.8.3\n</code></pre></li> <li> Trigger distribution of the tarballs to the mirrors: <pre><code>ssh midnightcommander@ftp-osl.osuosl.org '/home/midnightcommander/trigger-midnightcommander'\n</code></pre></li> <li> Check that files can be downloaded; adjust permissions (<code>0644</code>) if necessary</li> </ul>"},{"location":"release-process/#post-release-tasks","title":"Post-release tasks","text":"<ul> <li> Update the home page with the latest release version</li> <li> Write an announcement highlighting user-visible changes</li> <li> Create a new issue <code>Prepare for release mc-4.8.YY</code> (type: <code>Task</code>, label: <code>area: adm</code>) for the next release</li> <li> Close issue for current release</li> <li> Close current milestone<sup>1</sup></li> </ul> <ol> <li> <p>Labels and milestones are managed via Pulumi\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"source-code/","title":"Source code","text":""},{"location":"source-code/#downloads","title":"Downloads","text":"<ul> <li>Our source releases are kindly mirrored by OSU OSL:<ul> <li>https://ftp.osuosl.org/pub/midnightcommander/</li> </ul> </li> <li>Our repository is hosted on GitHub and mirrored by repo.or.cz:<ul> <li>https://github.com/MidnightCommander/mc</li> <li>https://repo.or.cz/midnight-commander.git (mirror)</li> </ul> </li> </ul> <p>To compile from source, refer to the installation instructions.</p>"},{"location":"source-code/#documentation","title":"Documentation","text":"<p>Look into the repository for the embedded documentation and <code>README</code> files in subdirectories. An archive of the (mostly obsolete, but partly still valuable) documentation from the Trac wiki pages is available here: https://github.com/MidnightCommander/trac-archive/wiki.</p>"},{"location":"source-code/#contributing","title":"Contributing","text":"<p>We require an issue (or pull request) and code review for any code contribution, except for the following, which can be committed directly to the development branch:</p> <ul> <li>Translations</li> <li>Documentation</li> <li>Infrastructure (<code>.github</code>)</li> </ul> <p>The commit message for the first patch in the series should begin with the following header:</p> <pre><code>Ticket #&lt;github_issue_number&gt;: brief summary of the changes\n</code></pre>"},{"location":"source-code/#version-control","title":"Version control","text":"<ul> <li>Our development branch is called <code>master</code></li> <li>Prefix feature branch names with the issue ID (e.g. <code>4632_shift_fx</code>)</li> <li>Rebase with <code>-i --autosquash</code> before merging to preserve linear history</li> <li>Use non-fast forward (<code>--no-ff</code>) merges to track commit origin</li> </ul>"},{"location":"source-code/#signing-off-commits","title":"Signing off commits","text":"<p>Note</p> <p>DCO sign-off is different to \"commit signing\" using something like PGP or <code>gitsign</code>!</p> <p>All contributors must acknowledge that they own the rights to the code they contribute by signing their commits with <code>git commit --amend -s</code> (adding a <code>Signed-off-by:</code> line to the commit message). This signifies that they abide by the Developer Certificate of Origin, Version 1.1, which is also used by the Linux kernel.</p>"},{"location":"source-code/#branch-lifecycle","title":"Branch lifecycle","text":"<p>Tip</p> <p>Do not forget to update the changelog as tracked on the current <code>NEWS-4.8.XX</code> wiki page!</p> <ol> <li>Without PR<ul> <li> Assign issue to yourself</li> <li> Update milestone</li> <li> Link a branch</li> <li> When ready for review:<ol> <li>Add the label <code>state: in review</code></li> <li><code>@mention</code> the reviewers</li> </ol> </li> <li> Address comments with <code>git commit --fixup</code></li> <li> When approved, add a <code>state: approved</code> label</li> <li> Make sure that CI is green and <code>git rebase -i --autosquash</code></li> <li> Proceed with the merge </li> <li> Manually delete the feature branch </li> </ul> </li> <li>With PR<ul> <li> Open in draft mode if not ready yet</li> <li> Switch to normal when ready for review</li> <li> Update milestone</li> <li> Invite reviewers</li> <li> Address comments with <code>git commit --fixup</code></li> <li> Secure approvals</li> <li> Make sure that CI is green and <code>/rebase</code></li> <li> Proceed with the merge </li> <li> Feature branch is deleted automatically</li> </ul> </li> </ol>"},{"location":"source-code/#code-review","title":"Code review","text":"<p>Tip</p> <p>To substantially increase the likelihood that your changes will be accepted, be sure to add tests for the code you touch.</p> <p>Contributions should be reviewed according to the following criteria:</p> Motivation It should be clear what the purpose of the proposed changes is. Tests Changes should be accompanied by tests that document that the desired goals have been achieved. Code quality (see Coding style) <ul> <li>Code is split into logically independent commits</li> <li>Changes are consistent with the rest of the code base</li> <li>No large whitespace changes intermixed with logic changes</li> </ul> Technical evaluation The code is a valid approach to the problem. <p>Note</p> <p>A lot of great (and sometimes not so great) literature has been written about code review over the decades. We do not intend to cover code review in detail here, just highlight the points that are most relevant to our process.</p> <p>A good place to start learning about code review in general is Your code sucks, and I hate you by Jonathan Lange.</p>"},{"location":"source-code/#cleanup-branch","title":"Cleanup branch","text":"<p>For every release, we create a cleanup branch like <code>4633_cleanup</code> to aggregate small code changes, connected to the corresponding release ticket (e.g. #4633).</p> <ul> <li>The cleanup branch should be created as needed and merged back in periodically (currently every few months).</li> <li>Delete the cleanup branch after merging it into the main branch and re-create it later with the same name if necessary.</li> <li>The cleanup branch should be merged into the main branch no later than a few weeks before the release to allow enough time for the changes to be tested by developers and users.</li> </ul> <p>Sometimes your patches might end up there. Do not worry, everything will be fine.</p>"},{"location":"source-code/#source-tour","title":"Source tour","text":"<p>A cross-referenced source code tour of the development branch is available at the following URL:</p> <ul> <li>https://source.midnight-commander.org</li> </ul>"},{"location":"translations/","title":"Translations","text":"<p>We use Transifex to crowdsource translations.</p> <p>Transifex allows us to centralize translation activities and enables translators without much previous experience to edit our localization files via the web interface. Translators who want to work directly with PO files can download the latest versions from Transifex, make their changes using familiar tools, and upload them back.</p>"},{"location":"translations/#contributing","title":"Contributing","text":"<p>To join our project, go to our project page and click on the \"Join this project\" button. Join requests for new contributors are processed by the maintainers as time permits.</p> <p>Note</p> <p>At the moment it is only possible to translate the interface and hint files!</p> <p>Translation of the manual pages from which the online help accessible via F1 is generated has been disabled to protect our translators. Unfortunately, the resources were manually uploaded to Transifex by a former member of the development team, but the corresponding sync code for the manual pages was never developed.</p> <p>Will you be the hero to merge the translations we currently have and fix the sync code to properly handle the manual pages?</p>"},{"location":"translations/#synchronization","title":"Synchronization","text":"<p>The updated POT file is automatically fetched by Transifex from the <code>master</code> branch of our GitHub repository.</p> <p>Updated PO files with translations are merged back into the repository during the release process.</p>"},{"location":"translations/#transifex-client","title":"Transifex client","text":"<p>As of 2025, Fedora 41 unfortunately only ships the old client (<code>transifex-client</code>), which is no longer useful.  The new client is available in binary form from GitHub (download, unpack and copy to <code>~/bin</code>). To complete the configuration, fill in your API token:</p> ~/.transifexrc<pre><code>[https://www.transifex.com]\nrest_hostname = https://rest.api.transifex.com\ntoken         = 1/***\n</code></pre> <p>To make sure that Transifex client is installed correctly, try to run it with the following command:</p> <pre><code>$ tx --help\n</code></pre>"},{"location":"translations/#trying-it-out","title":"Trying it out","text":"<p>To check updated translations locally, you need to build <code>mc</code> from source. Check out the repository and run the following command to fetch the translations from Transifex:</p> <pre><code>$ ./maint/sync-transifex/po-from-transifex.py\n</code></pre> <p>Then build and install as usual.</p>"}]}